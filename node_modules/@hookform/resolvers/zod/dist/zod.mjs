import{transformToNestObject as r,appendErrors as e}from"react-hook-form";import{convertArrayToPathName as t}from"@hookform/resolvers";function n(){return(n=Object.assign||function(r){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}).apply(this,arguments)}function o(r,e){(null==e||e>r.length)&&(e=r.length);for(var t=0,n=new Array(e);t<e;t++)n[t]=r[t];return n}function a(r,e){var t;if("undefined"==typeof Symbol||null==r[Symbol.iterator]){if(Array.isArray(r)||(t=function(r,e){if(r){if("string"==typeof r)return o(r,e);var t=Object.prototype.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?o(r,e):void 0}}(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var n=0;return function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(t=r[Symbol.iterator]()).next.bind(t)}var i=function(r,o){if(r.isEmpty)return{};for(var i,u=[].concat(r.errors),s={},c=a(u);!(i=c()).done;){var f,l,p,m=i.value,v=m.path,y=m.message,d=m.code,h=t(v);if("unionErrors"in m)for(var b,g=a(m.unionErrors.map(function(r){return r.errors}));!(b=g()).done;)u.push.apply(u,b.value);s=n({},s,v?s[h]&&o?((f={})[h]=e(h,o,s,d,y),f):((p={})[h]=s[h]||n({message:y,type:d},o?{types:(l={},l[d]=y||!0,l)}:{}),p):{})}return s},u=function(e,t){return function(n,o,a){void 0===a&&(a=!1);try{var u=e.safeParse(n,t);return Promise.resolve(u.success?{values:u.data,errors:{}}:{values:{},errors:r(i(u.error,a))})}catch(r){return Promise.reject(r)}}};export{u as zodResolver};
//# sourceMappingURL=zod.module.js.map
