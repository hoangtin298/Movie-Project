var r=require("react-hook-form"),e=require("@hookform/resolvers");function t(){return(t=Object.assign||function(r){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}).apply(this,arguments)}function n(r,e){(null==e||e>r.length)&&(e=r.length);for(var t=0,n=new Array(e);t<e;t++)n[t]=r[t];return n}function o(r,e){var t;if("undefined"==typeof Symbol||null==r[Symbol.iterator]){if(Array.isArray(r)||(t=function(r,e){if(r){if("string"==typeof r)return n(r,e);var t=Object.prototype.toString.call(r).slice(8,-1);return"Object"===t&&r.constructor&&(t=r.constructor.name),"Map"===t||"Set"===t?Array.from(r):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(r,e):void 0}}(r))||e&&r&&"number"==typeof r.length){t&&(r=t);var o=0;return function(){return o>=r.length?{done:!0}:{done:!1,value:r[o++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(t=r[Symbol.iterator]()).next.bind(t)}var a=function(n,a){if(n.isEmpty)return{};for(var i,s=[].concat(n.errors),u={},c=o(s);!(i=c()).done;){var l,f,v,p=i.value,y=p.path,m=p.message,d=p.code,h=e.convertArrayToPathName(y);if("unionErrors"in p)for(var b,g=o(p.unionErrors.map(function(r){return r.errors}));!(b=g()).done;)s.push.apply(s,b.value);u=t({},u,y?u[h]&&a?((l={})[h]=r.appendErrors(h,a,u,d,m),l):((v={})[h]=u[h]||t({message:m,type:d},a?{types:(f={},f[d]=m||!0,f)}:{}),v):{})}return u};exports.zodResolver=function(e,t){return function(n,o,i){void 0===i&&(i=!1);try{var s=e.safeParse(n,t);return Promise.resolve(s.success?{values:s.data,errors:{}}:{values:{},errors:r.transformToNestObject(a(s.error,i))})}catch(r){return Promise.reject(r)}}};
//# sourceMappingURL=zod.js.map
