{"version":3,"file":"joi.modern.js","sources":["../src/joi.ts"],"sourcesContent":["import {\n  appendErrors,\n  transformToNestObject,\n  Resolver,\n  FieldValues,\n} from 'react-hook-form';\nimport * as Joi from 'joi';\nimport { convertArrayToPathName } from '@hookform/resolvers';\n\nconst parseErrorSchema = (\n  error: Joi.ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.details)\n    ? error.details.reduce(\n        (previous: Record<string, any>, { path, message = '', type }) => {\n          const currentPath = convertArrayToPathName(path);\n\n          return {\n            ...previous,\n            ...(path\n              ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(\n                      currentPath,\n                      validateAllFieldCriteria,\n                      previous,\n                      type,\n                      message,\n                    ),\n                  }\n                : {\n                    [currentPath]: previous[currentPath] || {\n                      message,\n                      type,\n                      ...(validateAllFieldCriteria\n                        ? {\n                            types: { [type]: message || true },\n                          }\n                        : {}),\n                    },\n                  }\n              : {}),\n          };\n        },\n        {},\n      )\n    : [];\n\nexport const joiResolver = <TFieldValues extends FieldValues>(\n  schema: Joi.Schema,\n  options: Joi.AsyncValidationOptions = {\n    abortEarly: false,\n  },\n): Resolver<TFieldValues> => async (\n  values,\n  context,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: await schema.validateAsync(values, {\n        ...options,\n        context,\n      }),\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n"],"names":["parseErrorSchema","error","validateAllFieldCriteria","Array","isArray","details","reduce","previous","path","message","type","currentPath","convertArrayToPathName","[object Object]","appendErrors","types","joiResolver","schema","options","abortEarly","async","values","context","validateAsync","errors","e","transformToNestObject"],"mappings":"sVASA,MAAMA,EAAmB,CACvBC,EACAC,IAEAC,MAAMC,QAAQH,EAAMI,SAChBJ,EAAMI,QAAQC,OACZ,CAACC,GAAiCC,KAAAA,EAAMC,QAAAA,EAAU,GAAIC,KAAAA,MACpD,MAAMC,EAAcC,EAAuBJ,GAE3C,YACKD,EACCC,EACAD,EAASI,IAAgBT,EACvB,CACEW,CAACF,GAAcG,EACbH,EACAT,EACAK,EACAG,EACAD,IAGJ,CACEI,CAACF,GAAcJ,EAASI,OACtBF,QAAAA,EACAC,KAAAA,GACIR,EACA,CACEa,MAAO,CAAEF,CAACH,GAAOD,IAAW,IAE9B,KAGV,KAGR,IAEF,GAEOO,EAAc,CACzBC,EACAC,EAAsC,CACpCC,YAAY,KAEaC,MAC3BC,EACAC,EACApB,GAA2B,KAE3B,IACE,MAAO,CACLmB,aAAcJ,EAAOM,cAAcF,OAC9BH,GACHI,QAAAA,KAEFE,OAAQ,IAEV,MAAOC,GACP,MAAO,CACLJ,OAAQ,GACRG,OAAQE,EACN1B,EAAiByB,EAAGvB"}