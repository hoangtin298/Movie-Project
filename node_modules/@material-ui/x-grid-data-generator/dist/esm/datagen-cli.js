import{_ as e,b as t,g as i,a as r}from"./employees.columns-f7fbe862.js";import*as o from"fs";import*as a from"yargs";import"react";import"@material-ui/core/Avatar";import"chance";import"@material-ui/core/colors";import"@material-ui/core/styles";import"@material-ui/core/Tooltip";import"@material-ui/icons/Info";import"clsx";import"@material-ui/core/utils";import"@material-ui/core/InputBase";import"@material-ui/core/TextField";import"@material-ui/core/Checkbox";import"@material-ui/styles";import"reselect";import"@material-ui/core/Badge";import"@material-ui/core/IconButton";import"@material-ui/core/MenuItem";import"@material-ui/core/ClickAwayListener";import"@material-ui/core/Grow";import"@material-ui/core/Paper";import"@material-ui/core/Popper";import"@material-ui/core/MenuList";import"@material-ui/core/Switch";import"@material-ui/core/Button";import"@material-ui/core/FormControlLabel";import"@material-ui/core/Unstable_TrapFocus";import"@material-ui/core/FormControl";import"@material-ui/core/InputLabel";import"@material-ui/core/Select";import"@material-ui/core/ListItemIcon";import"@material-ui/core/CircularProgress";import"@material-ui/core/TablePagination";import"@material-ui/core/locale";import"@material-ui/core/NoSsr";import"@material-ui/lab/Rating";import"@material-ui/icons/ReportProblem";import"@material-ui/icons/Autorenew";import"@material-ui/icons/Done";import"@material-ui/core/Chip";function m(){a.command({command:"$0",describe:"Generates Component.propTypes from TypeScript declarations",builder:e=>e.option("dataset",{default:"",describe:'A dataset can be "commodity" | "employee"',type:"string"}).option("output",{default:"",describe:'The output file, if not passed, it will generate "./<dataset>-<size>.json"',type:"string"}).option("pretty",{default:!1,describe:"Print a prettier output",type:"boolean"}).option("size",{default:"1000",describe:"The number of rows to generate",type:"string"}),handler:a=>{var m,l;console.log(`Generating new ${a.dataset} dataset with ${Number(a.size).toLocaleString()} rows`),(m=Number(a.size),l=a.dataset,e(void 0,void 0,void 0,(function*(){return(yield t(Number(m),"commodity"===l.toLowerCase()?i():r())).rows}))).then((e=>{const t=a.output?a.output:`./${a.dataset}-${a.size}.json`;console.log("Saving generated dataset in "+t),o.writeFileSync(t,JSON.stringify(e,null,a.pretty?2:void 0))}))}}).help().strict(!0).version(!1).parse()}export{m as datagenCli};
